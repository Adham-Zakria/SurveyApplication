// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Domain.Models;

public partial class SurveyAppContext : DbContext
{
    public SurveyAppContext(DbContextOptions<SurveyAppContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionComment> QuestionComments { get; set; }

    public virtual DbSet<QuestionImage> QuestionImages { get; set; }

    public virtual DbSet<QuestionOption> QuestionOptions { get; set; }

    public virtual DbSet<QuestionType> QuestionTypes { get; set; }

    public virtual DbSet<Questionnaire> Questionnaires { get; set; }

    public virtual DbSet<QuestionsAnswer> QuestionsAnswers { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserGroup> UserGroups { get; set; }

    //
    //public DbSet<QuestionnaireBranch> QuestionnaireBranches { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1_CI_AS");

        modelBuilder.Entity<Branch>(entity =>
        {
            entity.HasKey(e => e.BranchId).HasName("PK__branch__E55E37DE3FF55D80");

            entity.ToTable("branch");

            entity.Property(e => e.BranchId)
                .ValueGeneratedNever()
                .HasColumnName("branch_id");
            entity.Property(e => e.BranchAddress)
                .HasMaxLength(255)
                .HasColumnName("branch_address");
            entity.Property(e => e.BranchIp)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("branch_ip");
            entity.Property(e => e.BranchName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("branch_name");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.DepartmentId).HasName("PK__departme__C2232422C4BA73CE");

            entity.ToTable("departments");

            entity.Property(e => e.DepartmentId)
                .ValueGeneratedNever()
                .HasColumnName("department_id");
            entity.Property(e => e.DepartmentName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("department_name");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.QuestionId).HasName("PK__question__2EC21549CD009299");

            entity.ToTable("questions");

            entity.Property(e => e.QuestionId).HasColumnName("question_id");
            entity.Property(e => e.QuestionHeader)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("question_header");
            entity.Property(e => e.QuestionType).HasColumnName("question_type");
            entity.Property(e => e.QuestionnaireId).HasColumnName("questionnaire_id");

            entity.HasOne(d => d.QuestionTypeNavigation).WithMany(p => p.Questions)
                .HasForeignKey(d => d.QuestionType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__questions__quest__35BCFE0A");

            entity.HasOne(d => d.Questionnaire).WithMany(p => p.Questions)
                .HasForeignKey(d => d.QuestionnaireId)
                .HasConstraintName("FK__questions__quest__34C8D9D1");
        });

        modelBuilder.Entity<QuestionComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__question__3213E83F4ED10860");

            entity.ToTable("question_comments");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Comment)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("comment");
            entity.Property(e => e.QuestionId).HasColumnName("question_id");

            entity.HasOne(d => d.Question).WithMany(p => p.QuestionComments)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__question___quest__3F466844");
        });

        modelBuilder.Entity<QuestionImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__question__3213E83F25808C90");

            entity.ToTable("question_images");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ImagePath)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("image_path");
            entity.Property(e => e.QuestionId).HasColumnName("question_id");

            entity.HasOne(d => d.Question).WithMany(p => p.QuestionImages)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__question___quest__3C69FB99");
        });

        modelBuilder.Entity<QuestionOption>(entity =>
        {
            entity.HasKey(e => e.OptionId).HasName("PK__question__F4EACE1BD1B6E65D");

            entity.ToTable("question_options");

            entity.Property(e => e.OptionId).HasColumnName("option_id");
            entity.Property(e => e.QuestionHeader)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("question_header");
            entity.Property(e => e.QuestionId).HasColumnName("question_id");

            entity.HasOne(d => d.Question).WithMany(p => p.QuestionOptions)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__question___quest__38996AB5");
        });

        modelBuilder.Entity<QuestionType>(entity =>
        {
            entity.HasKey(e => e.TypeId).HasName("PK__question__2C0005988657BA82");

            entity.ToTable("question_types");

            entity.Property(e => e.TypeId)
                .ValueGeneratedNever()
                .HasColumnName("type_id");
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("type_name");
        });

        modelBuilder.Entity<Questionnaire>(entity =>
        {
            entity.HasKey(e => e.QuestionnaireId).HasName("PK__question__B7C709390764AC50");

            entity.ToTable("questionnaires");

            entity.Property(e => e.QuestionnaireId).HasColumnName("questionnaire_id");
            entity.Property(e => e.Department).HasColumnName("department");
            entity.Property(e => e.QuestionnaireCreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("questionnaire_created_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.DepartmentNavigation).WithMany(p => p.Questionnaires)
                .HasForeignKey(d => d.Department)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__questionn__depar__30F848ED");

            entity.HasOne(d => d.User).WithMany(p => p.Questionnaires)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__questionn__user___31EC6D26");

            //--------------------------------------------------------------------------------------------------------------------------
            entity.HasMany(d => d.Branches).WithMany(p => p.Questionnaires)
                .UsingEntity<Dictionary<string, object>>(
                    "QuestionnairesBranch",
                    r => r.HasOne<Branch>().WithMany()
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__questionn__branc__4CA06362"),
                    l => l.HasOne<Questionnaire>().WithMany()
                        .HasForeignKey("QuestionnaireId")
                        .HasConstraintName("FK__questionn__quest__4BAC3F29"),
                    j =>
                    {
                        j.HasKey("QuestionnaireId", "BranchId").HasName("PK__question__4992EA445F1A0821");
                        j.ToTable("questionnaires_branchs");
                        j.IndexerProperty<int>("QuestionnaireId").HasColumnName("questionnaire_id");
                        j.IndexerProperty<int>("BranchId").HasColumnName("branch_id");
                    });
        });

        modelBuilder.Entity<QuestionsAnswer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("questions_answers");

            entity.Property(e => e.Answer)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("answer");
            entity.Property(e => e.QuestionId).HasColumnName("question_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Question).WithMany()
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__questions__quest__46E78A0C");

            entity.HasOne(d => d.User).WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__questions__user___48CFD27E");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__users__B9BE370F66D5B6E8");

            entity.ToTable("users");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("user_id");
            entity.Property(e => e.UserDepartment).HasColumnName("user_department");
            entity.Property(e => e.UserGroup).HasColumnName("user_group");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("user_name");
            entity.Property(e => e.UserPassword)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("user_password");
            entity.Property(e => e.UserPhone)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("user_phone");

            entity.HasOne(d => d.UserDepartmentNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.UserDepartment)
                .HasConstraintName("FK__users__user_depa__2B3F6F97");

            entity.HasOne(d => d.UserGroupNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.UserGroup)
                .HasConstraintName("FK__users__user_grou__2A4B4B5E");
        });

        modelBuilder.Entity<UserGroup>(entity =>
        {
            entity.HasKey(e => e.UserGroupId).HasName("PK__user_gro__DB165781830DD135");

            entity.ToTable("user_groups");

            entity.Property(e => e.UserGroupId)
                .ValueGeneratedNever()
                .HasColumnName("user_group_id");
            entity.Property(e => e.UserGroupName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("user_group_name");
        });

        OnModelCreatingPartial(modelBuilder);

        //
        modelBuilder.Entity<QuestionsAnswer>()
            .HasKey(qa => new { qa.QuestionId, qa.UserId });

        base.OnModelCreating(modelBuilder);

        //
        //modelBuilder.Entity<QuestionnaireBranch>()
        //     .ToTable("questionnaires_branchs");

        //modelBuilder.Entity<QuestionnaireBranch>()
        //     .HasKey(qb => new { qb.QuestionnaireId, qb.BranchId });

        //modelBuilder.Entity<QuestionnaireBranch>()
        //    .HasOne(qb => qb.Questionnaire)
        //    .WithMany(q => q.QuestionnairesBranches)
        //    .HasForeignKey(qb => qb.QuestionnaireId);

        //modelBuilder.Entity<QuestionnaireBranch>()
        //    .HasOne(qb => qb.Branch)
        //    .WithMany(b => b.QuestionnairesBranches)
        //    .HasForeignKey(qb => qb.BranchId);

        //modelBuilder.Entity<QuestionnaireBranch>(entity =>
        //{
        //    entity.ToTable("questionnaires_branchs"); // اسم الجدول في DB

        //    entity.HasKey(qb => qb.Id); // أو المفتاح الأساسي الفعلي

        //    // العلاقات
        //    entity.HasOne(qb => qb.Questionnaire)
        //          .WithMany(q => q.QuestionnairesBranches)
        //          .HasForeignKey(qb => qb.QuestionnaireId);

        //    entity.HasOne(qb => qb.Branch)
        //          .WithMany()
        //          .HasForeignKey(qb => qb.BranchId);
        //});

    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}